function is_site_prefix() {
{% for p in ipv6.prefixes | default([]) %}
  if net ~ [ {{ p.prefix }}{56,64} ] then accept;
{% endfor %}
  return false; 
}

filter ibgp_in {
  if DRAINED = 1 then reject;
  
  if is_default_route() then {
    bgp_local_pref = 100;
    accept;
  }

  if is_site_prefix() then {
    bgp_local_pref = 10;
    accept;
  }

  reject;
}

filter ibgp_out {
  if DRAINED = 1 then reject;

  if source = RTS_BGP then {
    if is_default_route() then accept;
    if is_site_prefix() && SITE_COMMUNITY ~ bgp_large_community then accept;
  }

  reject;
}

template bgp ibgp from generic_bgp {
  import filter ibgp_in;
  export filter ibgp_out;
  source address {{ intern_net6 | ipaddr(id) | ipaddr('address') }};
  rr client;
}

{% for h in groups['supernodes'] %}
{% if hostvars[h].ibgp_name is defined and hostvars[h].id != id %}
protocol bgp {{ hostvars[h].ibgp_name }} from ibgp {
  neighbor {{ intern_net6 | ipaddr(hostvars[h].id) | ipaddr('address') }} as {{ own_as }};
}

{% endif %}
{% endfor %}
