filter upstream_in {
  if DRAINED = 1 then reject;

  if is_default_route() then {
    bgp_local_pref = 1000;
    accept;
  }

  reject;
};

filter upstream_out {
  if DRAINED = 1 then reject;
  if is_own_prefix() then accept;

  reject;
};

template bgp upstream from generic_bgp {
  local as {{ own_as }};
  import filter upstream_in;
  export filter upstream_out;
};

{% if upstream.peers is defined %}
{% for peer in upstream.peers %}
{% if peer.ipv4 is defined %}
protocol bgp {{ peer.name }} from upstream {
{% if peer.ipv4.source is defined %}
  source address {{ peer.ipv4.source }};
{% endif %}
  neighbor {{ peer.ipv4.neighbor }} as {{ peer.as }};
};

{% endif %}
{% endfor %}
{% endif %}
