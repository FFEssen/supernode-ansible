filter upstream_in {
  if DRAINED = 1 then reject;

  if is_default_route() then {
    accept;
  }

  reject;
}

{% if nat_ip is defined %}
filter ffe_out {
  if DRAINED = 1 then reject;
  if net = {{ nat_ip.ffe }}/32 then accept;

  reject;
}

{% endif %}
template bgp upstream from generic_bgp {
  local as {{ own_as }};
  import filter upstream_in;
  export filter drain;
}

{% if upstream.peers is defined %}
{% for peer in upstream.peers %}
{% if peer.ipv4 is defined %}
protocol bgp {{ peer.name }} from upstream {
{% if peer.ipv4.source is defined %}
  source address {{ peer.ipv4.source }};
{% endif %}
  neighbor {{ peer.ipv4.neighbor }} as {{ peer.as }};
  export filter {{ peers[peer.as].export_filter }};
  default bgp_local_pref {{ peers[peer.as].local_pref | default(1000) }};
}

{% endif %}
{% endfor %}
{% endif %}
